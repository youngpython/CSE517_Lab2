function T=id3tree(xTr,yTr,maxdepth,weights)
% function T=id3tree(xTr,yTr,maxdepth,weights)
%
% The maximum tree depth is defined by "maxdepth" (maxdepth=2 means one split). 
% Each example can be weighted with "weights". 
%
% Builds an id3 tree
%
% Input:
% xTr | dxn input matrix with n column-vectors of dimensionality d
% xTe | dxm input matrix with n column-vectors of dimensionality d
% maxdepth = maximum tree depth
% weights = 1xn vector where weights(i) is the weight of example i
% 
% Output:
% T = decision tree 
%

% Answer to question 6a - if each parent splits (roughly) binary,
% expected value of q is, for n elements, 2^(n+1) - 1
[d,n]=size(xTr);
if nargin<4
    weights=ones(1,n)./n;
end
if nargin<3
   maxdepth = inf;
end
if size(unique(yTr),2) == 1
    T = yTr(:,1);
elseif size(unique(xTr),2) == 1
    %Split the matrix into a cell array, where each cell contains a column
    C = mat2cell(yTr, size(yTr, 1), ones(1, size(yTr, 2)));
    %Convert the column in each cell into a string
    D = cellfun(@(x) mat2str(x), C, 'UniformOutput', false);
    %Find the mode string
    [unique_strings, ~, string_map]=unique(D);
    most_common_string=unique_strings(mode(string_map));
    %A string of the column matrix should now appear.  Split by delimiters
    strcol = strsplit(most_common_string{1},{';','[',']',' '});
    %Convert the split numbers to doubles, remove the trailing '' strings
    %on either end, and transpose the row to a column.
    T = str2double(strcol(2:end-1))';
else
    S = zeros(6,2^(length(xTr)+1)-1);
    SL = id3tree(xTr,yTr,
end

 



